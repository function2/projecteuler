// https://projecteuler.net/problem=12
// Michael Seyfert <michael@codesand.org>
/*
Problem Statement:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

// The \sum_{k=1}^n k = (n+1)n/2 = T(n) is the nth triangle number.
// The number of divisors is the number of unique ordered sets we can form
//  from the prime factors.
// Give a list of all # of prime factors pn_2, pn_3, pn_5, pn_7,
//  the number of divisors is \prod_k (pn_k+1)[nonzero pn].

#include<iostream>
#include<map>
using namespace std;

template<typename numtype>
void GetPrimeFactors(map<numtype,size_t> &factors, numtype n)
{
	factors.clear();

	while(n % 2 == 0){
		n /= 2;
		++factors[2];
	}

	for(numtype k = 3; n != 1; k += 2){
		while(n%k == 0){
			n /= k;
			++factors[k];
		}
	}
}

int main()
{
	for(size_t k = 8; ;++k){
		map<size_t,size_t> factors;
		GetPrimeFactors(factors,k*(k+1)/2);
		// Get the number of divisors.
		size_t d = 1;
		for(map<size_t,size_t>::const_iterator I = factors.begin(); I != factors.end(); ++I)
			d *= (I->second+1);
		//cout << k << ' ' << k*(k+1)/2 << ' ' << d << '\n';
		if(d > 500){
			cout << k*(k+1)/2 << '\n';
			break;
		}
	}
}
